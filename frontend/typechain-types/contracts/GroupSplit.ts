/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "../types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type logGroupClosed = ContractEventLog<{
  groupId: string;
  owner: string;
  groupName: string;
  closingTime: string;
  isUSDC: boolean;
  0: string;
  1: string;
  2: string;
  3: string;
  4: boolean;
}>;
export type logGroupCreated = ContractEventLog<{
  groupId: string;
  owner: string;
  groupName: string;
  creationTime: string;
  isUSDC: boolean;
  0: string;
  1: string;
  2: string;
  3: string;
  4: boolean;
}>;
export type logGroupDepositReceived = ContractEventLog<{
  groupId: string;
  participant: string;
  nickname: string;
  deposit: string;
  isUSDC: boolean;
  0: string;
  1: string;
  2: string;
  3: string;
  4: boolean;
}>;
export type logGroupOpened = ContractEventLog<{
  groupId: string;
  owner: string;
  groupName: string;
  openingTime: string;
  isUSDC: boolean;
  0: string;
  1: string;
  2: string;
  3: string;
  4: boolean;
}>;
export type logGroupWithdrawal = ContractEventLog<{
  groupId: string;
  amountWithdrawn: string;
  time: string;
  totalCollected: string;
  totalWithdrawn: string;
  isUSDC: boolean;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: boolean;
}>;
export type logWithdrawalFailed = ContractEventLog<{
  groupId: string;
  owner: string;
  amount: string;
  isUSDC: boolean;
  0: string;
  1: string;
  2: string;
  3: boolean;
}>;

export interface GroupSplit extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): GroupSplit;
  clone(): GroupSplit;
  methods: {
    USDC(): NonPayableTransactionObject<string>;

    activeGroups(): NonPayableTransactionObject<string>;

    addParticipantToGroup(
      _groupId: number | string | BN,
      _participantAddress: string,
      _nickname: string,
      _deposit: number | string | BN
    ): NonPayableTransactionObject<void>;

    createGroup(
      _groupName: string,
      _ownerNickname: string,
      isUSDC: boolean
    ): NonPayableTransactionObject<void>;

    depositToGroup(
      _groupId: number | string | BN,
      _nickname: string,
      isUSDCDeposit: boolean,
      usdcAmount: number | string | BN
    ): PayableTransactionObject<void>;

    getActivegroups(): NonPayableTransactionObject<string>;

    getAllGroupIds(): NonPayableTransactionObject<string[]>;

    getGroupIndexById(
      _groupId: number | string | BN
    ): NonPayableTransactionObject<string>;

    getGroupInfoById(
      _groupId: number | string | BN
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
      2: boolean;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
      8: string;
      9: string;
      10: string[];
    }>;

    getGroupsNum(): NonPayableTransactionObject<string>;

    getParticipantDetails(
      _groupId: number | string | BN,
      _participantAddress: string
    ): NonPayableTransactionObject<{
      participantAddress: string;
      nickname: string;
      totalDeposits: string;
      0: string;
      1: string;
      2: string;
    }>;

    groupIds(arg0: number | string | BN): NonPayableTransactionObject<string>;

    groups(arg0: number | string | BN): NonPayableTransactionObject<{
      groupId: string;
      groupName: string;
      isUSDC: boolean;
      status: string;
      creationTime: string;
      owner: string;
      ownerNickname: string;
      balance: string;
      totalCollected: string;
      totalWithdrawn: string;
      0: string;
      1: string;
      2: boolean;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
      8: string;
      9: string;
    }>;

    withdrawFromGroup(
      _groupId: number | string | BN
    ): PayableTransactionObject<void>;
  };
  events: {
    logGroupClosed(cb?: Callback<logGroupClosed>): EventEmitter;
    logGroupClosed(
      options?: EventOptions,
      cb?: Callback<logGroupClosed>
    ): EventEmitter;

    logGroupCreated(cb?: Callback<logGroupCreated>): EventEmitter;
    logGroupCreated(
      options?: EventOptions,
      cb?: Callback<logGroupCreated>
    ): EventEmitter;

    logGroupDepositReceived(
      cb?: Callback<logGroupDepositReceived>
    ): EventEmitter;
    logGroupDepositReceived(
      options?: EventOptions,
      cb?: Callback<logGroupDepositReceived>
    ): EventEmitter;

    logGroupOpened(cb?: Callback<logGroupOpened>): EventEmitter;
    logGroupOpened(
      options?: EventOptions,
      cb?: Callback<logGroupOpened>
    ): EventEmitter;

    logGroupWithdrawal(cb?: Callback<logGroupWithdrawal>): EventEmitter;
    logGroupWithdrawal(
      options?: EventOptions,
      cb?: Callback<logGroupWithdrawal>
    ): EventEmitter;

    logWithdrawalFailed(cb?: Callback<logWithdrawalFailed>): EventEmitter;
    logWithdrawalFailed(
      options?: EventOptions,
      cb?: Callback<logWithdrawalFailed>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "logGroupClosed", cb: Callback<logGroupClosed>): void;
  once(
    event: "logGroupClosed",
    options: EventOptions,
    cb: Callback<logGroupClosed>
  ): void;

  once(event: "logGroupCreated", cb: Callback<logGroupCreated>): void;
  once(
    event: "logGroupCreated",
    options: EventOptions,
    cb: Callback<logGroupCreated>
  ): void;

  once(
    event: "logGroupDepositReceived",
    cb: Callback<logGroupDepositReceived>
  ): void;
  once(
    event: "logGroupDepositReceived",
    options: EventOptions,
    cb: Callback<logGroupDepositReceived>
  ): void;

  once(event: "logGroupOpened", cb: Callback<logGroupOpened>): void;
  once(
    event: "logGroupOpened",
    options: EventOptions,
    cb: Callback<logGroupOpened>
  ): void;

  once(event: "logGroupWithdrawal", cb: Callback<logGroupWithdrawal>): void;
  once(
    event: "logGroupWithdrawal",
    options: EventOptions,
    cb: Callback<logGroupWithdrawal>
  ): void;

  once(event: "logWithdrawalFailed", cb: Callback<logWithdrawalFailed>): void;
  once(
    event: "logWithdrawalFailed",
    options: EventOptions,
    cb: Callback<logWithdrawalFailed>
  ): void;
}
