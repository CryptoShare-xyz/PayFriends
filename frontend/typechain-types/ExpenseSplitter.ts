/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type LogExpenseApproved = ContractEventLog<{
  expenseId: string;
  approver: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type LogExpenseCompleted = ContractEventLog<{
  expenseId: string;
  amountTransferred: string;
  0: string;
  1: string;
}>;
export type LogExpenseCreated = ContractEventLog<{
  index: string;
  creator: string;
  amount: string;
  splitAddresses: string[];
  0: string;
  1: string;
  2: string;
  3: string[];
}>;
export type LogTransferFailed = ContractEventLog<{
  expenseId: string;
  creator: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;

export interface ExpenseSplitter extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ExpenseSplitter;
  clone(): ExpenseSplitter;
  methods: {
    activeExpenses(): NonPayableTransactionObject<string>;

    approveExpense(
      _expenseId: number | string | BN
    ): PayableTransactionObject<void>;

    cashFlow(): NonPayableTransactionObject<string>;

    createExpense(
      _amount: number | string | BN,
      _splitAddresses: string[]
    ): NonPayableTransactionObject<void>;

    expenses(arg0: number | string | BN): NonPayableTransactionObject<{
      creator: string;
      amount: string;
      completed: boolean;
      collectedAmount: string;
      0: string;
      1: string;
      2: boolean;
      3: string;
    }>;

    getActiveExpenses(): NonPayableTransactionObject<string>;

    getExpense(_index: number | string | BN): NonPayableTransactionObject<{
      0: string;
      1: string;
      2: string[];
      3: boolean;
      4: boolean[];
      5: string;
    }>;

    getExpensesLength(): NonPayableTransactionObject<string>;
  };
  events: {
    LogExpenseApproved(cb?: Callback<LogExpenseApproved>): EventEmitter;
    LogExpenseApproved(
      options?: EventOptions,
      cb?: Callback<LogExpenseApproved>
    ): EventEmitter;

    LogExpenseCompleted(cb?: Callback<LogExpenseCompleted>): EventEmitter;
    LogExpenseCompleted(
      options?: EventOptions,
      cb?: Callback<LogExpenseCompleted>
    ): EventEmitter;

    LogExpenseCreated(cb?: Callback<LogExpenseCreated>): EventEmitter;
    LogExpenseCreated(
      options?: EventOptions,
      cb?: Callback<LogExpenseCreated>
    ): EventEmitter;

    LogTransferFailed(cb?: Callback<LogTransferFailed>): EventEmitter;
    LogTransferFailed(
      options?: EventOptions,
      cb?: Callback<LogTransferFailed>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "LogExpenseApproved", cb: Callback<LogExpenseApproved>): void;
  once(
    event: "LogExpenseApproved",
    options: EventOptions,
    cb: Callback<LogExpenseApproved>
  ): void;

  once(event: "LogExpenseCompleted", cb: Callback<LogExpenseCompleted>): void;
  once(
    event: "LogExpenseCompleted",
    options: EventOptions,
    cb: Callback<LogExpenseCompleted>
  ): void;

  once(event: "LogExpenseCreated", cb: Callback<LogExpenseCreated>): void;
  once(
    event: "LogExpenseCreated",
    options: EventOptions,
    cb: Callback<LogExpenseCreated>
  ): void;

  once(event: "LogTransferFailed", cb: Callback<LogTransferFailed>): void;
  once(
    event: "LogTransferFailed",
    options: EventOptions,
    cb: Callback<LogTransferFailed>
  ): void;
}
