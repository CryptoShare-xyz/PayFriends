import Web3 from 'web3';

const contractABI = [
  // ... ABI from the compiled contract
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_expenseId',
        type: 'uint256',
      },
    ],
    name: 'approveExpense',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_amount',
        type: 'uint256',
      },
      {
        internalType: 'address[]',
        name: '_splitAddresses',
        type: 'address[]',
      },
    ],
    name: 'createExpense',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    stateMutability: 'payable',
    type: 'receive',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'expenses',
    outputs: [
      {
        internalType: 'address',
        name: 'creator',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
      {
        internalType: 'bool',
        name: 'completed',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];
const contractAddress = '0xd9145CCE52D386f254917e481eB44e9943F39138';
const contract = new web3.eth.Contract(contractABI, contractAddress);

const address1 = '0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2';
const address2 = '0x4B20993Bc481177ec7E8f571ceCaE8A9e22C02db';
const address3 = '0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB';

// "9000000000",["0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2","0x4B20993Bc481177ec7E8f571ceCaE8A9e22C02db","0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB"]
const amount = 9;
const splitAddresses = [address1, address2, address3];
const fromAddress = address1;

async function createExpense(amount, splitAddresses) {
  const accounts = await web3.eth.getAccounts();
  const fromAddress = accounts[0];

  await contract.methods
    .createExpense(amount, splitAddresses)
    .send({ from: fromAddress });
}

createExpense(amount, splitAddresses);
